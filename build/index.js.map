{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;AAAA,mCAAgE;AAChE,mCAAoC;AACpC,gDAAwB;AAGxB,MAAM,aAAa;IACjB,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAChC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,uBAAe,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,4BAAoB,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAEO,cAAc,CAAC,YAAiB;QACtC,IAAI,MAAW,CAAC;QAEhB,IAAI,CAAC;YACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,GAAG,YAAY,CAAC;QACxB,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;YAC3B,OAAO,MAAM,CAAC,cAAc,CAAA;QAC9B,CAAC;QAED,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QAC/B,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,OAAO,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,CAAE,EAAE,CAAC,CAAC;QAChF,CAAC;QAED,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,MAAqC;QACjE,MAAM,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,uBAAe,EAAE,4BAAoB,EAAE,GAAG,CAAC,CAAC;QAClE,MAAM,YAAY,GAAG,MAAM,IAAA,iBAAS,EAClC,GAAG,GAAG,EAAE,EACR;YACE,WAAW,EAAE,IAAI,CAAC,MAAM;SACzB,EACD;YACE,GAAG,MAAM;YACT,MAAM,EAAE,YAAY;SACrB,CACF,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,MAAqC;QACjD,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;CAEF;AAED,iBAAS,aAAa,CAAC","sourcesContent":["import { HASDATA_API_URL, HASDATA_API_ENDPOINT } from './const';\nimport { doRequest } from './utils';\nimport path from 'path';\nimport * as hdType from './types';\n\nclass GoogleSerpApi {\n  constructor(private apiKey: string) {\n    if (!this.apiKey) {\n      throw new Error('API Key is not provided');\n    }\n\n    if (!HASDATA_API_URL) {\n      throw new Error('API URL is not provided');\n    }\n\n    if (!HASDATA_API_ENDPOINT) {\n      throw new Error('API Endpoint is not provided');\n    }\n  }\n\n  private formatResponse(responseBody: any): any {\n    let result: any;\n\n    try {\n      result = JSON.parse(responseBody);\n    } catch {\n      result = responseBody;\n    }\n\n    if (result.status === 'ok') {\n      return result.scrapingResult\n    }\n\n    if (result.error) {\n      throw new Error(result.error)\n    }\n\n    if (result.status === 'error') {\n      throw new Error(`${result.message}: ${JSON.stringify(result.errors || {}) }`);\n    }\n\n    return result\n  }\n\n  public async getSearchResults(params: hdType.GetSearchResultsParams): Promise<any> {\n    const url = path.join(HASDATA_API_URL, HASDATA_API_ENDPOINT, '/');\n    const responseBody = await doRequest(\n      `${url}`,\n      {\n        'x-api-key': this.apiKey,\n      },\n      {\n        ...params,\n        source: 'nodejs_sdk',\n      }\n    );\n\n    return this.formatResponse(responseBody);\n  }\n\n  public scrape(params: hdType.GetSearchResultsParams): Promise<any> {\n    return this.getSearchResults(params);\n  }\n\n}\n\nexport = GoogleSerpApi;\n"]}