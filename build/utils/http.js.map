{"version":3,"file":"http.js","sourceRoot":"","sources":["../../utils/http.ts"],"names":[],"mappings":";;;AAAA,MAAM,aAAc,SAAQ,KAAK;IAC/B,YAAmB,QAAkB;QACnC,KAAK,CAAC,mCAAmC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;QAD1C,aAAQ,GAAR,QAAQ,CAAU;IAErC,CAAC;CACF;AAEM,MAAM,SAAS,GAAG,KAAK,EAC5B,GAAW,EACX,OAA4B,EAC5B,MAA2B,EACV,EAAE;IACnB,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAA;IACxD,MAAM,OAAO,GAAG,GAAG,GAAG,IAAI,SAAS,EAAE,CAAA;IAErC,MAAM,OAAO,GAAG;QACd,OAAO,EAAE;YACP,GAAG,OAAO;YACV,iBAAiB,EAAE,mBAAmB;SACvC;KACF,CAAA;IAED,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAC9C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAA;QACnC,CAAC;QAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;IAC9B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,GAAG,CAAA;IACX,CAAC;AACH,CAAC,CAAA;AAzBY,QAAA,SAAS,aAyBrB","sourcesContent":["class RequestFailed extends Error {\n  constructor(public response: Response) {\n    super(`Request failed with status code ${response.status}`)\n  }\n}\n\nexport const doRequest = async (\n  url: string,\n  headers: Record<string, any>,\n  params: Record<string, any>\n): Promise<string> => {\n  const urlParams = new URLSearchParams(params).toString()\n  const fullUrl = `${url}?${urlParams}`\n\n  const options = {\n    headers: {\n      ...headers,\n      'Accept-Encoding': 'gzip, deflate, br',\n    },\n  }\n\n  try {\n    const response = await fetch(fullUrl, options)\n    if (!response.ok) {\n      throw new RequestFailed(response)\n    }\n\n    return await response.text()\n  } catch (err) {\n    throw err\n  }\n}\n"]}